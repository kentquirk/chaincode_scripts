; ntrd Operations
; Permitted Transactions: All except Delegate and Lock
; Validation Keys: 4 ntrd Keys
; Validation Rules:
;   ChangeValidation: 1 of first 2 signatures and 1 of second 2 signatures
;   All others: 1 signature


handler EVENT_DEFAULT {
    zero                            ; chaincode can Just Succeed, here, because
                                    ; ndau validates that at least one signature
                                    ; is valid
}

; Delegate is forbidden
handler EVENT_DELEGATE {
    fail
}

; Lock is forbidden
handler EVENT_LOCK {
    fail
}

;   ChangeValidation: 1 of first 2 signatures and 1 of second 2 signatures
handler EVENT_CHANGEVALIDATION {
                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ;acct tx sigs
    call LowPairsOneEach
}


; 1 of first 2 signatures and 1 of second 2 signatures
func LowPairsOneEach(1) {
                                    ; sigs
    push 0b1100                     ; sigs 0b1100
    one                             ; sigs 0b1100 1
    call CheckMask                  ; sigs 0b1100 1 returncode
                                    ; if the first pair has a nonzero return code,
                                    ; fail fast
    ifnz
        fail
    endif
                                    ; check the other pair of ntrd sigs
    drop2                           ; sigs
    push 0b0011                     ; sigs 0b0011
    one
    call CheckMask                  ; sigs 0b0011 1 returncode
                                    ; this return code Just Works
}

func CheckMask(3) {
                                    ; sigs mask nreqd_sigs
    tuck 2                          ; nreqd_sigs sigs mask
    and                             ; nreqd_sigs masked_sigs
    call HasN                       ; ... (nmasked_sigs >= 2)
    not                             ; ... returncode
}

func HasN(2) {
                                    ; nreqd_sigs sigs
    count1s                         ; nreqd_sigs nsigs
    lte                             ; (nreqd_sigs <= nsigs)
}

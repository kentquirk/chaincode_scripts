; this script is for sales by ntrd at the ndau target price.

; specs are as follows:
; Permitted Transactions: ChangeValidation, ReleaseFromEndowment, Transfer, TransferAndLock
; Validation Keys: 4 ntrd Keys plus 3 pre-BPC Keys
; Validation Rules:
;   ChangeValidation: 1 of first 2 ntrd signatures and 1 of second 2 ntrd signatures, or 2 pre-BPC signatures
;   ReleaseFromEndowment:
;   - Up to 5,000 ndau: 1 of first 2 ntrd signatures
;   - 5,000 - 20,000 ndau: 1 of first 2 ntrd signatures and 1 of second 2 ntrd signatures
;   - More than 20,000 ndau: 1 of first 2 ntrd signatures and 1 of second 2 ntrd signatures and 1 of pre-BPC
;   Transfer and TransferAndLock:
;   - Up to 20,000 ndau: 1 of first 2 ntrd signatures
;   - More than 20,000 ndau: 1 of first 2 ntrd signatures and 1 of second 2 ntrd signatures

; validation key ordering:
; 0 - ntrd Group A, Sig a
; 1 - ntrd Group A, Sig b
; 2 - ntrd Group B, Sig a
; 3 - ntrd Group B, Sig b
; 4 - pre-bpc A
; 5 - pre-bpc B
; 6 - pre-bpc C

; we don't want any event we haven't specifically handled
handler EVENT_DEFAULT {
    fail
}

; For ChangeValidation, the rule is:
; (count(GroupA) >= 1 AND count(GroupB) >= 1) OR (count(BPC) >= 2)
; We start with the bpc because that lets us early-exit on the AND clause.
; We do an explicit count and gte, even for the 1s cases, because we expect that we may want to
; change the number of signatures someday.
;
; Expected arguments on the stack in order from bottom to top are:
;    account
;    transaction
;    bitmask of which authorized keys were found in the signature list
handler EVENT_CHANGEVALIDATION {
                                    ; bitmasks for signature groups
    NTRD_GROUPA_MASK = 0x03
    NTRD_GROUPB_MASK = 0x0C
    BPC_MASK = 0x70

                                    ; number of sigs required
    GROUPA_MIN = 1
    GROUPB_MIN = 1
    BPC_MIN = 2

                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ;acct tx sigs
                                    ; we never use acct or tx, so let's just get rid of 'em
    tuck 2                          ;sigs acct tx
    drop2                           ;sigs

    push BPC_MASK                   ;sigs bpcmask
    push BPC_MIN                    ;sigs bpcmask bpcmin
    call EnoughSigs                 ;sigs bpcmask bpcmin enuf
    ifnz                            ;sigs bpcmask bpcmin
        zero                        ;sigs bpcmask bpcmin zero
        ret                         ; zero is success -- >=2 bpc sigs, so it's valid
    endif                           ;not enough bpc, so look for ntrd sigs

                                    ;sigs bpcmask bpcmin
    drop2                           ;sigs
    push NTRD_GROUPA_MASK           ;sigs grpamask
    push GROUPA_MIN                 ;sigs grpamask grpamin
    call EnoughSigs                 ;sigs grpamask grpamin enuf
    ifz                             ;sigs grpamask grpamin
        fail                        ; not enough grpa sigs
    endif
                                    ;sigs grpamask grpamin
    drop2                           ;sigs
    push NTRD_GROUPB_MASK           ;sigs grpbmask
    push GROUPB_MIN                 ;sigs grpbmask grpbmin
    call EnoughSigs                 ;sigs grpbmask grpbmin enuf
    not                             ; a successful return is 0
}


; For ReleaseFromEndowment (RFE), the rule is:
; * we always need 1 of groupA
; * amt > 5000, also need 1 of groupB
; * amt > 20000, also need 1 of pre-BPC
; We do an explicit count and gte, even for the 1s cases, because we expect that we may want to
; change the number of signatures someday.
;
; Expected arguments on the stack in order from bottom to top are:
;    account
;    transaction
;    bitmask of which authorized keys were found in the signature list
handler EVENT_RELEASEFROMENDOWMENT {
                                    ; bitmasks for signature groups
    NTRD_GROUPA_MASK = 0x03
    NTRD_GROUPB_MASK = 0x0C
    BPC_MASK = 0x70

                                    ; number of sigs required
    GROUPA_MIN = 1
    GROUPB_MIN = 1
    BPC_MIN = 1

                                    ; breakpoints for decisions
    LOW_LIMIT = nd5000
    HIGH_LIMIT = nd20000
                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ; get rid of acct since we don't need to look at it
                                    ;acct tx sigs
    roll 2                          ;tx sigs acct
    drop                            ;tx sigs

                                    ; check that we have at least GROUPA_MIN of groupA
                                    ;tx sigs
    push NTRD_GROUPA_MASK           ;tx sigs grpamask
    push GROUPA_MIN                 ;tx sigs grpamask grpamin
    call EnoughSigs                 ;tx sigs grpamask grpamin enuf
    ifz                             ;tx sigs grpamask grpamin
        fail                        ; not enough grpa sigs
    endif
    drop2                           ;tx sigs

                                    ; if amt <= LOW_LIMIT, we're done
                                    ;tx sigs
    pick 1                          ;tx sigs tx
    field TX_QUANTITY               ;tx sigs amt
    push LOW_LIMIT                  ;tx sigs amt LOW_LIMIT
    lte                             ;tx sigs (amt <= LOW_LIMIT)
    ifnz
        zero                        ; we're under the limit, so succeed
        ret
    endif

                                    ; check that we have at least GROUPB_MIN of groupA
                                    ;tx sigs
    push NTRD_GROUPB_MASK           ;tx sigs grpbmask
    push GROUPB_MIN                 ;tx sigs grpbmask grpbmin
    call EnoughSigs                 ;tx sigs grpbmask grpbmin enuf
    ifz                             ;tx sigs grpbmask grpbmin
        fail                        ; not enough grpb sigs
    endif
    drop2                           ;tx sigs

                                    ; if amt <= HIGH_LIMIT, we're done
                                    ;tx sigs
    swap                            ;sigs tx
    field TX_QUANTITY               ;sigs amt
    push HIGH_LIMIT                 ;sigs amt HIGH_LIMIT
    lte                             ;sigs (amt <= HIGH_LIMIT)
    ifnz
        zero                        ; we're under the limit, so we're done
        ret
    endif

                                    ; it's a big amount, look for a bpc sig
                                    ;sigs
    push BPC_MASK                   ;sigs bpcmask
    push BPC_MIN                    ;sigs bpcmask bpcmin
    call EnoughSigs                 ;sigs bpcmask bpcmin enuf
    not                             ; if true, then valid, if false, invalid
}

;   Transfer and TransferAndLock:
;   - Up to 20,000 ndau: 1 of first 2 ntrd signatures
;   - More than 20,000 ndau: 1 of first 2 ntrd signatures and 1 of second 2 ntrd signatures


; For EventTransfer, the rule is:
; * we always need 1 of groupA
; * amt > 20000, also need 1 of groupB
;
; Expected arguments on the stack in order from bottom to top are:
;    account
;    transaction
;    bitmask of which authorized keys were found in the signature list
handler EVENT_TRANSFER, EVENT_TRANSFERANDLOCK {
                                    ; bitmasks for signature groups
    NTRD_GROUPA_MASK = 0x03
    NTRD_GROUPB_MASK = 0x0C

                                    ; number of sigs required
    GROUPA_MIN = 1
    GROUPB_MIN = 1

                                    ; breakpoints for decisions
    HIGH_LIMIT = nd20000
                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ; get rid of acct since we don't need to look at it
                                    ;acct tx sigs
    roll 2                          ;tx sigs acct
    drop                            ;tx sigs

                                    ; check that we have at least GROUPA_MIN of groupA
                                    ;tx sigs
    push NTRD_GROUPA_MASK           ;tx sigs grpamask
    push GROUPA_MIN                 ;tx sigs grpamask grpamin
    call EnoughSigs                 ;tx sigs grpamask grpamin enuf
    ifz                             ;tx sigs grpamask grpamin
        fail                        ; not enough grpa sigs
    endif
    drop2                           ;tx sigs

                                    ; if amt <= HIGH_LIMIT, we're done
                                    ;tx sigs
    swap                            ;sigs tx
    field TX_QUANTITY               ;sigs amt
    push HIGH_LIMIT                 ;sigs amt HIGH_LIMIT
    lte                             ;sigs (amt <= HIGH_LIMIT)
    ifnz
        zero                        ; we're under the limit, so we're done
        ret
    endif

                                    ; it's a big amount, look for a sig from grpb
                                    ;sigs
    push NTRD_GROUPB_MASK           ;sigs grpbmask
    push GROUPB_MIN                 ;sigs grpbmask grpbmin
    call EnoughSigs                 ;sigs grpbmask grpbmin enuf
    not                             ; if EnoughSigs was true, then succeed
}


; EnoughSigs expects to find a bitmask of signature indices found,
; a mask with the bits of which ones to consider, and a minimum number that must be set
; returns either true or false
func EnoughSigs(3) {
                                    ;sigs countmask required
    tuck 2                          ;required sigs countmask
    and                             ;required sigs_to_consider
    count1s                         ;required num_found
    lte                             ;(num_found >= required)
}

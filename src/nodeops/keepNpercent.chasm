;  ----- ---- --- -- -
;  Copyright 2019 Oneiro NA, Inc. All Rights Reserved.
; 
;  Licensed under the Apache License 2.0 (the "License").  You may not use
;  this file except in compliance with the License.  You can obtain a copy
;  in the file LICENSE in the source distribution or at
;  https://www.apache.org/licenses/LICENSE-2.0.txt
;  - -- --- ---- -----

; this is a node operations distribution script that simply keeps all of
; the node reward for itself (it returns an empty array of structs)

; stack:
;  (top) costakers (list of structs of account data decorated with address)
;        totalAward
;        node (account data decorated with address)

; returns:
;	     list of structs,
;               field 1 is the address
;               field 10 is the amount returned

; anything remaining after the return list is sent to the node's account
; if the return list is > the amount available, only the amount available
; is distributed -- everyone else gets 0.

; this is the percentage of the total reward that should go to the node.
; the remainder is divided into equal parts and that amount is given to
; each co-staker.
KEEP_PCT = 60
ALLOCATE_FIELD = 10

handler EVENT_DEFAULT {
                                    ; costakers total node
    swap                            ; total costakers node
    push KEEP_PCT                   ; keep total costakers node
    push 100                        ; 100 keep total costakers node
    muldiv                          ; ( total * (keep/100) ) costakers node
    over                            ; costakers total_distribution_amt costakers node
    len                             ; ncostakers amt costakers node
    swap                            ; amt ncostakers costakers node
    div                             ; per_costaker costakers node
    swap                            ; costakers per_costaker node
    deco PER_ACCT ALLOCATE_FIELD
                                    ; decorated_costakers node
                                    ; we're done
}

func PER_ACCT(1) {
                                    ; incoming stack:   ; costaker per_costaker
    drop                            ; just leave the amount on the stack
}

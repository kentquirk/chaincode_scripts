; Permitted Transactions: ChangeValidation, NominateNodeRewards, CommandValidatorChange
; Validation Keys: 3 ndau Network Keys plus 3 pre-BPC Keys
; Validation Rules:

;   ChangeValidation: 2 ndau Network signatures and 1 pre-BPC signature
;   NominateNodeRewards: 1 ndau Network signature
;   SetSysvar: 2 ndau Network signatures
;   CommandValidatorChange: 2 ndau Network signatures and 1 pre-BPC signature

NETWORK_MASK = 0b000_111
BPC_MASK = 0b111_000

handler EVENT_DEFAULT {
    fail
}

handler EVENT_NOMINATENODEREWARD {
                                    ; ... sigs
    push NETWORK_MASK               ; sigs mask
    push 1                          ; num reqd
    call CheckMask
}

handler EVENT_SETSYSVAR {
    push NETWORK_MASK
    push 2
    call CheckMask
}

handler EVENT_CHANGEVALIDATION {
    call NetworkValidation
}

handler EVENT_COMMANDVALIDATORCHANGE {
    call NetworkValidation
}

func NetworkValidation(1) {
    NETWORK_REQD = 2
    BPC_REQD = 1

                                    ; ... sigs
                                    ; check that the BPC sig is present
    push BPC_MASK                   ; sigs mask
    push BPC_REQD                   ; sigs mask reqd
    call CheckMask                  ; sigs mask reqd didfail
    ifnz                            ; sigs mask reqd
        fail
    endif
                                    ; sigs mask reqd
    drop2                           ; sigs
    push NETWORK_MASK               ; sigs mask
    push NETWORK_REQD               ; sigs mask reqd
    call CheckMask                  ; sigs mask reqd didfail
}

; returns true if the mask failed to verify
func CheckMask(3) {
                                    ; sigs mask nreqd_sigs
    tuck 2                          ; nreqd_sigs sigs mask
    and                             ; nreqd_sigs masked_sigs
    call HasN                       ; ... (nmasked_sigs >= 2)
    not                             ; ... returncode
}

func HasN(2) {
                                    ; nreqd_sigs sigs
    count1s                         ; nreqd_sigs nsigs
    lte                             ; (nreqd_sigs <= nsigs)
}

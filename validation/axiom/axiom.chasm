;  ----- ---- --- -- -
;  Copyright 2019, 2020 The Axiom Foundation. All Rights Reserved.
; 
;  Licensed under the Apache License 2.0 (the "License").  You may not use
;  this file except in compliance with the License.  You can obtain a copy
;  in the file LICENSE in the source distribution or at
;  https://www.apache.org/licenses/LICENSE-2.0.txt
;  - -- --- ---- -----


; this script is for release of ndau by Axiom for sale at the ndau target price and for issuance when sold.
; the BPC has no role in these operations but in its oversight role may change these validation rules if necessary.

; specs are as follows:
; Permitted Transactions: ChangeValidation, ReleaseFromEndowment, RecordEndowmentNAV Transfer, TransferAndLock, Issue
; Validation Keys: 3 Axiom Keys plus 9 BPC Keys
; Validation Rules:

;   ChangeValidation: 2 Axiom signatures and 3 BPC signatures, or 6 BPC signatures

;   RecordEndowmentNAV: 1 Axiom signature

;   Transfer and TransferAndLock, ReleaseFromEndowment, Issue:
;   - <= 30,000 ndau: 1 Axiom signature
;   - > 30,000 ndau: 2 Axiom signatures

; validation key ordering:
; 0 - Axiom A
; 1 - Axiom B
; 2 - Axiom C
; 3 - BPC A
; 4 - BPC B
; 5 - BPC C
; 6 - BPC D
; 7 - BPC E
; 8 - BPC F
; 9 - BPC G
; 10 - BPC H
; 11 - BPC I

; bitmasks for signature groups
AXIOM_MASK = 0x07
BPC_MASK = 0xFF8

; we don't want any event we haven't specifically handled
handler EVENT_DEFAULT {
    fail
}

; For ChangeValidation, the rule is:
; (count(Axiom) >= 2 OR (count(BPC) >= 6)
; We start with the bpc because that lets us early-exit on the AND clause.
; We do an explicit count and gte, even for the 1s cases, because we expect that we may want to
; change the number of signatures someday.
;
; Expected arguments on the stack in order from bottom to top are:
;    account
;    transaction
;    bitmask of which authorized keys were found in the signature list

handler EVENT_CHANGEVALIDATION {
                                    ; number of sigs required
    AXIOM_MIN = 2
    BPC_WITH_AXIOM_MIN = 3          ; 2 of AXIOM + 3 of BPC_WITH_AXIOM
    BPC_ALONE_MIN = 6               ; OR 6 of BPC_ALONE_MIN

                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ;acct tx sigs
                                    ; we never use acct or tx, so let's just get rid of 'em
    tuck 2                          ;sigs acct tx
    drop2                           ;sigs

    push BPC_MASK                   ;sigs bpcmask
    push BPC_ALONE_MIN              ;sigs bpcmask bpcalonemin
    call EnoughSigs                 ;sigs bpcmask bpcalonemin enuf
    ifnz                            ;sigs bpcmask bpcalonemin
        zero                        ;sigs bpcmask bpcalonemin zero
        ret                         ; zero is success -- >=6 bpc sigs, so it's valid
    endif                           ;not enough bpc alone, so look for Axiom sigs

                                    ;sigs bpcmask bpcalonemin
    drop2                           ;sigs
    push BPC_MASK                   ;sigs bpcmask
    push BPC_WITH_AXIOM_MIN         ;sigs bpcmask bpcwithamin
    call EnoughSigs                 ;sigs bpcmask bpcwithamin enuf
    ifz                             ;sigs bpcmask bpcwithamin
        fail                        ; not enough bpc sigs
    endif
                                    ;sigs bpcmask bpcwithamin
    drop2                           ;sigs
    push AXIOM_MASK                 ;sigs grpamask
    push AXIOM_MIN                  ;sigs grpamask axiommin
    call EnoughSigs                 ;sigs grpamask axiommin enuf
    ifz                             ;sigs grpamask axiommin
        fail                        ; not enough axiom sigs
    endif

    zero                            ; a successful return is 0
}

; To record the endowment's NAV only one Axiom (not BPC) signature is required. This requirement
; is less stringent than the others because it is reversible. A new NAV can be recorded at any time.
; The signatures are checked against the Axiom mask and not the BPC mask.

handler EVENT_RECORDENDOWMENTNAV {
                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ;acct tx sigs
                                    ; we never use acct or tx, so let's just get rid of 'em
    tuck 2                          ;sigs acct tx
    drop2                           ;sigs

    push AXIOM_MASK                 ;sigs grpamask
    and                             ;sigs_found
    ifz
        fail                        ;need any one or more sigs from Axiom group
    endif

    zero                            ; a successful return is 0
}

; For ReleaseFromEndowment (RFE), Transfer, or Transfer and Lock, the rule is:
; * we always need 1 of Axiom
; * amt > 30000, need 2 of Axiom

; We do an explicit count and gte, even for the 1s cases, because we expect that we may want to
; change the number of signatures someday.
;
; Expected arguments on the stack in order from bottom to top are:
;    account
;    transaction
;    bitmask of which authorized keys were found in the signature list

handler EVENT_RELEASEFROMENDOWMENT, EVENT_TRANSFER, EVENT_TRANSFERANDLOCK, EVENT_ISSUE {
                                    ; number of sigs required
    BELOW_MIN = 1
    ABOVE_MIN = 2
                                    ; breakpoints for decisions
    AMT_LIMIT = nd30000
                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ; get rid of acct since we don't need to look at it
                                    ;acct tx sigs
    roll 2                          ;tx sigs acct
    drop                            ;tx sigs

                                    ; if amt <= LOW_LIMIT, we're done
                                    ;tx sigs
    pick 1                          ;tx sigs tx
    field TX_QUANTITY               ;tx sigs amt
    push AMT_LIMIT                  ;tx sigs amt LOW_LIMIT
    lte                             ;tx sigs (amt <= LOW_LIMIT)
    ifnz
        zero                        ; we're under the limit, so succeed
        ret
    endif

                                    ; check that we have at least ABOVE_MIN of Axiom
                                    ;tx sigs
    push AXIOM_MASK                 ;tx sigs axiommask
    push ABOVE_MIN                  ;tx sigs axiommask grpbmin
    call EnoughSigs                 ;tx sigs axiommask grpbmin enuf
    ifz                             ;tx sigs axiommask grpbmin
        fail                        ; not enough axiom sigs
    endif

    zero                            ; succeed
}

; EnoughSigs expects to find a bitmask of signature indices found,
; a mask with the bits of which ones to consider, and a minimum number that must be set
; returns either true or false
func EnoughSigs(3) {
                                    ;sigs countmask required
    tuck 2                          ;required sigs countmask
    and                             ;required sigs_to_consider
    count1s                         ;required num_found
    lte                             ;(num_found >= required)
}

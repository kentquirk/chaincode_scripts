; this script is for release of ndau by Axiom for sale at the ndau target price and for issuance when sold.
; the BPC has no role in these operations but in its oversight role may change these validation rules if necessary.

; specs are as follows:
; Permitted Transactions: ChangeValidation, ReleaseFromEndowment, Transfer, TransferAndLock, Issue, RecordPrice
; Validation Keys: 4 Axiom Keys plus 3 pre-BPC Keys
; Validation Rules:
;   ChangeValidation: 1 of first 2 Axiom signatures and 1 of second 2 Axiom signatures and 1 of 3 pre-BPC signatures, or 2 pre-BPC signatures
;   RecordPrice: Any two signatures
;   ReleaseFromEndowment:
;   - Up to 5,000 ndau: 1 of first 2 Axiom signatures
;   - >5,000 - 20,000 ndau: 1 of first 2 Axiom signatures and 1 of second 2 Axiom signatures
;   - More than 20,000 ndau: any 3 of the 4 Axiomn signatures
;   Transfer and TransferAndLock, and Issue:
;   - Up to 20,000 ndau: 1 of first 2 Axiom signatures
;   - More than 20,000 ndau: 1 of first 2 Axiom signatures and 1 of second 2 Axiom signatures

; validation key ordering:
; 0 - Axiom Group A, Sig a
; 1 - Axiom Group A, Sig b
; 2 - Axiom Group B, Sig a
; 3 - Axiom Group B, Sig b
; 4 - pre-bpc A
; 5 - pre-bpc B
; 6 - pre-bpc C

; bitmasks for signature groups
AXIOM_GROUPA_MASK = 0x03
AXIOM_GROUPB_MASK = 0x0C
AXIOM_MASK = 0x0F
BPC_MASK = 0x70

; we don't want any event we haven't specifically handled
handler EVENT_DEFAULT {
    fail
}

handler EVENT_RECORDPRICE {
    MIN_SIGS = 2
                                    ; only item on stack will be the sigs bitmask
    count1s                         ; nsigs
    push MIN_SIGS                   ; nsigs minsigs
    gte                             ; (nsigs >= minsigs)
    not                             ; zero is a good return
}

; For ChangeValidation, the rule is:
; (count(GroupA) >= 1 AND count(GroupB) >= 1) OR (count(BPC) >= 2)
; We start with the bpc because that lets us early-exit on the AND clause.
; We do an explicit count and gte, even for the 1s cases, because we expect that we may want to
; change the number of signatures someday.
;
; Expected arguments on the stack in order from bottom to top are:
;    account
;    transaction
;    bitmask of which authorized keys were found in the signature list
handler EVENT_CHANGEVALIDATION {
                                    ; number of sigs required
    GROUPA_MIN = 1
    GROUPB_MIN = 1
    BPC_WITH_AXIOM_MIN = 1          ; 1 of GROUPA + 1 of GROUPB + 1 of BPC_WITH_AXIOM
    BPC_ALONE_MIN = 2               ; OR 2 of BPC_ALONE_MIN

                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ;acct tx sigs
                                    ; we never use acct or tx, so let's just get rid of 'em
    tuck 2                          ;sigs acct tx
    drop2                           ;sigs

    push BPC_MASK                   ;sigs bpcmask
    push BPC_ALONE_MIN              ;sigs bpcmask bpcalonemin
    call EnoughSigs                 ;sigs bpcmask bpcalonemin enuf
    ifnz                            ;sigs bpcmask bpcalonemin
        zero                        ;sigs bpcmask bpcalonemin zero
        ret                         ; zero is success -- >=2 bpc sigs, so it's valid
    endif                           ;not enough bpc alone, so look for Axiom sigs

                                    ;sigs bpcmask bpcalonemin
    drop2                           ;sigs
    push BPC_MASK                   ;sigs bpcmask
    push BPC_WITH_AXIOM_MIN         ;sigs bpcmask bpcwithamin
    call EnoughSigs                 ;sigs bpcmask bpcwithamin enuf
    ifz                             ;sigs bpcmask bpcwithamin
        fail                        ; not enough bpc sigs
    endif
                                    ;sigs bpcmask bpcwithamin
    drop2                           ;sigs
    push AXIOM_GROUPA_MASK          ;sigs grpamask
    push GROUPA_MIN                 ;sigs grpamask grpamin
    call EnoughSigs                 ;sigs grpamask grpamin enuf
    ifz                             ;sigs grpamask grpamin
        fail                        ; not enough grpa sigs
    endif
                                    ;sigs grpamask grpamin
    drop2                           ;sigs
    push AXIOM_GROUPB_MASK          ;sigs grpbmask
    push GROUPB_MIN                 ;sigs grpbmask grpbmin
    call EnoughSigs                 ;sigs grpbmask grpbmin enuf
    not                             ; a successful return is 0
}


; For ReleaseFromEndowment (RFE), the rule is:
; * we always need 1 of groupA
; * amt > 5000, also need 1 of groupB
; * amt > 20000, also need 1 more of either groupA or groupB
; We do an explicit count and gte, even for the 1s cases, because we expect that we may want to
; change the number of signatures someday.
;
; Expected arguments on the stack in order from bottom to top are:
;    account
;    transaction
;    bitmask of which authorized keys were found in the signature list
handler EVENT_RELEASEFROMENDOWMENT {
                                    ; number of sigs required
    GROUPA_MIN = 1
    GROUPB_MIN = 1
    COMBINED_MIN = 3

                                    ; breakpoints for decisions
    LOW_LIMIT = nd5000
    HIGH_LIMIT = nd20000
                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ; get rid of acct since we don't need to look at it
                                    ;acct tx sigs
    roll 2                          ;tx sigs acct
    drop                            ;tx sigs

                                    ; check that we have at least GROUPA_MIN of groupA
                                    ;tx sigs
    push AXIOM_GROUPA_MASK          ;tx sigs grpamask
    push GROUPA_MIN                 ;tx sigs grpamask grpamin
    call EnoughSigs                 ;tx sigs grpamask grpamin enuf
    ifz                             ;tx sigs grpamask grpamin
        fail                        ; not enough grpa sigs
    endif
    drop2                           ;tx sigs

                                    ; if amt <= LOW_LIMIT, we're done
                                    ;tx sigs
    pick 1                          ;tx sigs tx
    field TX_QUANTITY               ;tx sigs amt
    push LOW_LIMIT                  ;tx sigs amt LOW_LIMIT
    lte                             ;tx sigs (amt <= LOW_LIMIT)
    ifnz
        zero                        ; we're under the limit, so succeed
        ret
    endif

                                    ; check that we have at least GROUPB_MIN of groupA
                                    ;tx sigs
    push AXIOM_GROUPB_MASK          ;tx sigs grpbmask
    push GROUPB_MIN                 ;tx sigs grpbmask grpbmin
    call EnoughSigs                 ;tx sigs grpbmask grpbmin enuf
    ifz                             ;tx sigs grpbmask grpbmin
        fail                        ; not enough grpb sigs
    endif
    drop2                           ;tx sigs

                                    ; if amt <= HIGH_LIMIT, we're done
                                    ;tx sigs
    swap                            ;sigs tx
    field TX_QUANTITY               ;sigs amt
    push HIGH_LIMIT                 ;sigs amt HIGH_LIMIT
    lte                             ;sigs (amt <= HIGH_LIMIT)
    ifnz
        zero                        ; we're under the limit, so we're done
        ret
    endif

                                    ; it's a big amount, look for three sigs
                                    ;sigs
    push AXIOM_MASK                 ;sigs axiommask
    push COMBINED_MIN               ;sigs axiommask combinedmin
    call EnoughSigs                 ;sigs axiommask combinedmin enuf
    not                             ; if true, then valid, if false, invalid
}

;   Transfer and TransferAndLock:
;   - Up to 20,000 ndau: 1 of first 2 Axiom signatures
;   - More than 20,000 ndau: 1 of first 2 Axiom signatures and 1 of second 2 Axiom signatures


; For EventTransfer, the rule is:
; * we always need 1 of groupA
; * amt > 20000, also need 1 of groupB
;
; Expected arguments on the stack in order from bottom to top are:
;    account
;    transaction
;    bitmask of which authorized keys were found in the signature list
handler EVENT_TRANSFER, EVENT_TRANSFERANDLOCK, EVENT_ISSUE {
                                    ; number of sigs required
    GROUPA_MIN = 1
    GROUPB_MIN = 1

                                    ; breakpoints for decisions
    HIGH_LIMIT = nd20000
                                    ; stack top on right -- sig bitmask on top, then tx, then account
                                    ; get rid of acct since we don't need to look at it
                                    ;acct tx sigs
    roll 2                          ;tx sigs acct
    drop                            ;tx sigs

                                    ; check that we have at least GROUPA_MIN of groupA
                                    ;tx sigs
    push AXIOM_GROUPA_MASK           ;tx sigs grpamask
    push GROUPA_MIN                 ;tx sigs grpamask grpamin
    call EnoughSigs                 ;tx sigs grpamask grpamin enuf
    ifz                             ;tx sigs grpamask grpamin
        fail                        ; not enough grpa sigs
    endif
    drop2                           ;tx sigs

                                    ; if amt <= HIGH_LIMIT, we're done
                                    ;tx sigs
    swap                            ;sigs tx
    field TX_QUANTITY               ;sigs amt
    push HIGH_LIMIT                 ;sigs amt HIGH_LIMIT
    lte                             ;sigs (amt <= HIGH_LIMIT)
    ifnz
        zero                        ; we're under the limit, so we're done
        ret
    endif

                                    ; it's a big amount, look for a sig from grpb
                                    ;sigs
    push AXIOM_GROUPB_MASK           ;sigs grpbmask
    push GROUPB_MIN                 ;sigs grpbmask grpbmin
    call EnoughSigs                 ;sigs grpbmask grpbmin enuf
    not                             ; if EnoughSigs was true, then succeed
}


; EnoughSigs expects to find a bitmask of signature indices found,
; a mask with the bits of which ones to consider, and a minimum number that must be set
; returns either true or false
func EnoughSigs(3) {
                                    ;sigs countmask required
    tuck 2                          ;required sigs countmask
    and                             ;required sigs_to_consider
    count1s                         ;required num_found
    lte                             ;(num_found >= required)
}

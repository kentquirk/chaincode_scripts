; Node Operations
;
; Govern staking, node registration, and the reverse of both of those operations.
;
; See https://paper.dropbox.com/doc/Node-Operations-Rules-Proposal--AgKAV7c_y9Wi4HIPGd6UVydGAQ-fQtSgwmn07FLQVFi4Jlmd
; for pseudocode and rationale.

; napu per ndau
; we use _0000_0000 as an obvious 8-zeros suffix
NDAU = 1_0000_0000

MIN_TX_QTY = 100_0000_0000          ; 100 ndau minimum in an individual Stake transaction
MAX_AGGREGATE_STAKE = 50_000_0000_0000 ; 50,000 ndau

MIN_PRIMARY_STAKE = 1_000_0000_0000 ; 1000 ndau

THIRTY_DAY = 2_592_000_000_000      ; 60 * 60 * 24 * 30 * 1_000_000
NINETY_DAY = 7_776_000_000_000      ; 60 * 60 * 24 * 90 * 1_000_000

RESOLVE_STAKE_FEE = 5_0000_0000     ; 5 ndau

;; the absence of an EVENT_DEFAULT handler is equivalent to manually defining
;; it to fail: in either case, calling in with an unspecified function causes
;; a failure


;; Each stake tx has to be for at least the MIN_TX_QTY and the total aggregate stake has to be
;; less than MAX_AGGREGATE_STAKE.
handler EVENT_STAKE {
                                    ; primary rules stakeTo target tx aggregate from_primary from_target
    pick 3                          ; primary rules stakeTo target tx aggregate from_primary from_target tx
    field TX_QUANTITY               ; primary rules stakeTo target tx aggregate from_primary from_target qty
    push MIN_TX_QTY                 ; primary rules stakeTo target tx aggregate from_primary from_target qty MINQTY
    lt                              ; primary rules stakeTo target tx aggregate from_primary from_target (qty < MINQTY)
    ifnz                            ; primary rules stakeTo target tx aggregate from_primary from_target
        neg1                        ; fail with -1 on the stack
        ret
    endif
                                    ; primary rules stakeTo target tx aggregate from_primary from_target
    pick 3                          ; primary rules stakeTo target tx aggregate from_primary from_target tx
    field TX_QUANTITY               ; primary rules stakeTo target tx aggregate from_primary from_target qty
    pick 3                          ; primary rules stakeTo target tx aggregate from_primary from_target qty aggregate
    add                             ; primary rules stakeTo target tx aggregate from_primary from_target new_aggregate
    push MAX_AGGREGATE_STAKE        ; primary rules stakeTo target tx aggregate from_primary from_target new_aggregate MAXSTAKE
    lte                             ; primary rules stakeTo target tx aggregate from_primary from_target (new > MAX)
    not                             ; invert the sense of the return value
    ret
}

;; Unstake is always allowed but imposes a 90-day hold (the second value on the stack)
handler EVENT_UNSTAKE {
    push NINETY_DAY                 ; 90 days hold
    zero                            ; success
}


;; RegisterNode requires total primary stake of more than MIN_PRIMARY
handler EVENT_REGISTERNODE {
                                    ; primary rules stakeTo target tx aggregate from_primary from_target
    over                            ; primary rules stakeTo target tx aggregate from_primary from_target from_primary
    push MIN_PRIMARY_STAKE          ; primary rules stakeTo target tx aggregate from_primary from_target from_primary MIN_PRIMARY
    lt                              ; if it's less than min primary then fail the attempt to register
}

;; ResolveStake is expected to return the fee for ResolveStake that goes to the rules account
;;
handler EVENT_RESOLVESTAKE {
                                    ; primary rules stakeTo target tx aggregate from_primary from_target
    pick 4                          ; primary rules stakeTo target tx aggregate from_primary from_target target
    field ACCT_BALANCE              ; primary rules stakeTo target tx aggregate from_primary from_target target.balance
    push RESOLVE_STAKE_FEE          ; ... target.balance RESOLVE_STAKE_FEE
                                    ; target.balance FEE
    dup2                            ; target.balance FEE target.balance FEE
    lt                              ; target.balance FEE (target.balance<FEE)
    ifnz
        swap                        ; FEE target.balance
    endif
    ;; the lesser of target.balance and FEE is on top of the stack at return time
}

